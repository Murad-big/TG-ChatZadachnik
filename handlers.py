from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from excel_manager import read_excel_data, add_task_to_excel, write_excel_data
from utils import generate_task_hash, restricted, restricted_edit
from datetime import datetime
import re
from telegram.ext import (
    ContextTypes,
)


@restricted
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è –ë–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á")
    else:
        print("update.message is None")

@restricted
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–Ø –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        "/help - —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "/set_deadline @username DD/MM/YYYY –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/check_deadline - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏\n"
    )
    await update.message.reply_text(help_text)

@restricted
async def check_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        names, _, _, _ = read_excel_data()
        unique_names = sorted(set(names))


        keyboard = [[InlineKeyboardButton(name, callback_data=f"user:{name}")] for name in unique_names]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=reply_markup)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

@restricted_edit
async def task_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    selected_hash = query.data.split(":")[1]
    names, desc, dates, statuses = read_excel_data()

    selected_task = None
    task_date = None
    task_status = None

    for i in range(len(desc)):
        task_hash = generate_task_hash(names[i], desc[i], dates[i])
        if task_hash == selected_hash:
            selected_task = desc[i]
            task_date = dates[i]
            task_status = statuses[i]
            break

    if not selected_task:
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    task_status_icon = "‚úÖ" if task_status == "Done" else "‚ùå"

    keyboard = [
        [
            InlineKeyboardButton("–ù–µ —Å–¥–µ–ª–∞–Ω–æ ‚ùå", callback_data=f"status:undone:{selected_hash}"),
            InlineKeyboardButton("–°–¥–µ–ª–∞–Ω–æ ‚úÖ", callback_data=f"status:done:{selected_hash}"),
        ],
        [
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å üóë", callback_data=f"delete:{selected_hash}"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"–ó–∞–¥–∞—á–∞: {selected_task}\n"
        f"–î–µ–¥–ª–∞–π–Ω: {task_date}\n"
        f"–°—Ç–∞—Ç—É—Å: {task_status_icon}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

@restricted_edit
async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, selected_hash = query.data.split(":")
    names, desc, dates, statuses = read_excel_data()

    for i in range(len(desc)):
        task_hash = generate_task_hash(names[i], desc[i], dates[i])
        if task_hash == selected_hash:
            del names[i]
            del desc[i]
            del dates[i]
            del statuses[i]
            write_excel_data(names, desc, dates, statuses)
            break

    await query.edit_message_text("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")


async def user_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    selected_user = query.data.split(":")[1]
    names, desc, dates, _ = read_excel_data()

    user_tasks = [
        {"desc": desc[i], "date": dates[i], "hash": generate_task_hash(names[i], desc[i], dates[i])}
        for i in range(len(names)) if names[i] == selected_user
    ]

    if not user_tasks:
        await query.edit_message_text(f"–£ {selected_user} –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    keyboard = [
        [InlineKeyboardButton(task["desc"][:21] + "...", callback_data=f"task:{task['hash']}")]
        for task in user_tasks
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"–ó–∞–¥–∞—á–∏ –¥–ª—è {selected_user}:", reply_markup=reply_markup)

@restricted_edit
async def update_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, status, selected_hash = query.data.split(":")
    names, desc, dates, statuses = read_excel_data()

    for i in range(len(desc)):
        task_hash = generate_task_hash(names[i], desc[i], dates[i])
        if task_hash == selected_hash:
            statuses[i] = "Done" if status == "done" else "Undone"
            write_excel_data(names, desc, dates, statuses)
            break

    new_status_icon = "‚úÖ" if status == "done" else "‚ùå"
    await query.edit_message_text(
        f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_status_icon}.",
    )

@restricted
@restricted_edit
async def set_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message:
            if update.callback_query:
                await update.callback_query.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
            return

        text = update.message.text.strip()

        if not text.startswith("/set_deadline "):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
            return

        text = text[len("/set_deadline "):].strip()

        if " " not in text:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /set_deadline @username DD/MM/YYYY –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
            return

        parts = text.split(" ", 2)

        if len(parts) < 3:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /set_deadline @username DD/MM/YYYY –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
            return

        username = parts[0]
        deadline = parts[1]
        task = parts[2]

        date_pattern = r"^\d{2}/\d{2}/\d{4}$"
        if not re.match(date_pattern, deadline):
            await update.message.reply_text("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD/MM/YYYY, –Ω–∞–ø—Ä–∏–º–µ—Ä 01/03/2030.")
            return

        try:
            deadline_date = datetime.strptime(deadline, "%d/%m/%Y").date()
        except ValueError:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD/MM/YYYY.")
            return

        add_task_to_excel(username, task, deadline)

        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–ª—è {username} –¥–æ–±–∞–≤–ª–µ–Ω–∞. –î–µ–¥–ª–∞–π–Ω: {deadline}.")

    except Exception as e:
        if update.message:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
        elif update.callback_query:
            await update.callback_query.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@restricted
async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –æ —á–µ–º –≤—ã –º–µ–Ω—è –ø—Ä–æ—Å–∏—Ç–µ, –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω—ã –≤ /help"
    )
